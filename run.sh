#!/bin/bash

# print help message
if [ "$1" = "help" ] || [ "$1" = "" ]; then
    echo "Heist to the Museum project."
    echo
    echo "Usage: run.sh OPTION [ARGUMENT]"
    echo
    echo "Options:"
    echo "  build [local]     Build project."
    echo "  deploy            Deploy and run project into class servers."
    echo "  kill              Kill all processes running on class servers."
    echo "  get-log           Get log file from class servers."
    echo "  doc               Generate javadoc."
    echo "  clean             Remove all generated files."
    echo "  clean-all         Remove all generated files and env files."
    echo "  check-log FILE    Check if log file is valid."
    echo "  help              Print this help message."
    exit 0;
fi

# clear files generated by previous runs
if [ "$1" = "clean" ]; then
    rm -r src/*/*.class 2> /dev/null
    rm -r src/*/*/*.class 2> /dev/null
    rm -r src/*/*/*/*.class 2> /dev/null
    rm -r log/*.log 2> /dev/null
    rm -r doc/ 2> /dev/null
    rm -r build/ 2> /dev/null
    rm -rf export/ 2> /dev/null
    rm -rf stat 2> /dev/null
    exit 0;
fi

# clear all files generated by previous runs, including env files
if [ "$1" = "clean-all" ]; then
    rm -r src/*/*.class 2> /dev/null
    rm -r src/*/*/*.class 2> /dev/null
    rm -r src/*/*/*/*.class 2> /dev/null
    rm -r log/*.log 2> /dev/null
    rm -r doc/ 2> /dev/null
    rm -r build/ 2> /dev/null
    rm -rf export/ 2> /dev/null
    rm -rf stat 2> /dev/null
    rm .env 2> /dev/null
    rm .password 2> /dev/null
    exit 0;
fi

# run check-log.py script
if [ "$1" = "check-log" ]; then
    if [ "$2" = "" ]; then
        echo "Error: No log file passed as an argument!" >&2;
        exit 1
    fi
    if [ ! -f "$2" ]; then
        echo "Error: $2 is not a file!" >&2;
        exit 1;
    fi
    python3 utils/check-log.py $2
    exit $?;
fi

# check if dotenv file exists
if [ ! -f ".env" ]; then
    echo "Warning: .env file not found!";
    # Check if user wants to create .env file
    read -p "Info: Do you want to create a .env file? (Y/n) "
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        exit 0;
    fi
    echo
    source ./scripts/createDotEnv.sh
fi

# load dotenv file
source .env

# check if script is being run at root of project
if [ ! -d src/ ]; then
    echo "Error: Please run script at the root of the project!"
    exit 1;
fi

# add lib path to classpath
export CLASSPATH=$CLASSPATH:$LIB_PATH/*

# generate javadoc
if [ "$1" = "doc" ]; then
    javadoc -d $DOC_PATH/ $SRC_PATH/*/*.java $SRC_PATH/*/*/*.java
    exit 0;
fi

# compile project
if [ "$1" = "build" ]; then
    if [ "$2" = "local" ]; then
      $SCRIPTS_PATH/buildAndGenerateLocal.sh $(whoami)
    else
      $SCRIPTS_PATH/buildAndGenerateGlobal.sh
    fi

    if [ $? -ne 0 ]; then
      echo "Error: Build failed!" >&2;
      exit $?;
    fi
    exit 0;
fi

# deploy to class servers
if [ "$1" = "deploy" ]; then
    $SCRIPTS_PATH/checkRMI.sh > /dev/null
    ret=$?

    if [ $ret == 2 ]; then
      echo "Info: Deploying for the first time...";
      $SCRIPTS_PATH/deployAndRunFirstTime.sh
    elif [ $ret == 1 ]; then
      echo "Warning: One of RMI Registry or Registry is not running!";
      echo "Warning: Killing both processes and deploying...";
      $SCRIPTS_PATH/killAllProcesses.sh
      $SCRIPTS_PATH/deployAndRunFirstTime.sh
    elif [ $ret == 0 ]; then
      echo "Info: RMI Registry and Registry are already running.";
      echo "Info: Deploying...";
      $SCRIPTS_PATH/deployAndRunOtherTimes.sh
    else
      echo "Error: Something went wrong!" >&2;
      exit 1;
    fi

    exit 0;
fi

# kill all processes running on class servers
if [ "$1" = "kill" ]; then
    $SCRIPTS_PATH/killAllProcesses.sh
    exit 0;
fi

# get log file from class servers
if [ "$1" = "get-log" ]; then
    $SCRIPTS_PATH/getLog.sh
    exit 0;
fi
