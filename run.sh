#!/bin/bash
PREVIOUS_DIR=$(pwd)

# print help message
if [ "$1" = "help" ]; then
    echo "Usage: ./run.sh [OPTION] [ARGUMENT]"
    echo "Run the Heist to the Museum project."
    echo ""
    echo "Options:"
    echo "  [NO ARGUMENT]     Run project once."
    echo "  [NUMBER]          Run project NUMBER times."
    echo "  compile           Compile project."
    echo "  doc               Generate javadoc."
    echo "  clean             Remove all generated files."
    echo "  check-log         Check if log file is valid."
    echo "  check-log-dir     Check if all log files in a directory are valid."
    echo "  help              Print this help message."
    echo ""
    echo "Examples:"
    echo "  ./run.sh 5        Run project 5 times."
    echo "  ./run.sh          Run project once."
    echo "  ./run.sh check-log log/run1.log"
    echo "                    Check if log file is valid."
    echo "  ./run.sh check-log-dir log/"
    echo "                    Check if all log files in a directory are valid."
    echo ""
    exit 0;
fi

# clear file generated by previous runs
if [ "$1" = "clean" ]; then
    rm -r src/**/*.class 2> /dev/null
    rm -r log/ 2> /dev/null
    rm -r doc/ 2> /dev/null
    exit 0;
fi

# run check-log.py script
if [ "$1" = "check-log" ]; then
    if [ "$2" = "" ]; then
        echo "Error: No log file passed as an argument!" >&2;
        exit 1
    fi
    python3 utils/check-log.py $2
    exit $?;
fi

# run check-logs.py script on log directory
if [ "$1" = "check-log-dir" ]; then
    if [ "$2" = "" ]; then
        echo "Error: No log dir passed as an argument!" >&2;
        exit 1
    fi
    if [ ! -d "$2" ]; then
        echo "Error: $2 is not a directory!" >&2;
        exit 1;
    fi
    FILES=$2/*.log
    for f in $FILES
    do
        echo "Processing $f file..."
        python3 utils/check-log.py $f > /dev/null
        if [ "$?" -ne 0 ]; then
            exit 1;
        fi
    done
    exit $?;
fi

# check if script is being run at root of project
cd $(pwd)/src/ 2> /dev/null
if [ "$?" -ne 0 ]; then
    echo "Please run script at root of project!"
    cd $PREVIOUS_DIR
    exit 1;
fi

# generate javadoc
if [ "$1" = "doc" ]; then
    javadoc -cp .:$PREVIOUS_DIR/lib/genclass.jar -d ../doc/ **/*.java
    exit 0;
fi

# compile project
javac -cp .:$PREVIOUS_DIR/lib/genclass.jar **/*.java
if [ "$?" -ne 0 ]; then
    echo "Something went wrong! Make sure you are at the root of the project"
    exit 1;
fi

# exit if complile only
if [ "$1" = "compile" ]; then
    exit 0;
fi

# check if argument is a number
re='^[0-9]+$'
if ! [[ $1 =~ $re || "$1" =~ "" ]] ; then
   echo "Error: Argument passed is not a number" >&2;
   exit 1
fi

# run project once
if [[ "$1" = "" ]]; then
    java -cp .:$PREVIOUS_DIR/lib/genclass.jar main.HeistToTheMuseum
    exit $?
fi

# run project multiple times
rm -r ../log/run*.log 2> /dev/null
mkdir ../log/ 2> /dev/null
if [ "$1" -lt 1 ]; then
    echo "Error: Argument passed must be a positive number" >&2;
    exit 1
fi
for i in $(seq 1 $1)
do
    echo -e "Run n.o " $i
    echo "../log/run$i.log" | java -cp .:$PREVIOUS_DIR/lib/genclass.jar main.HeistToTheMuseum > /dev/null
    if [ "$?" -ne "0" ]; then
        exit 1;
    fi
done
